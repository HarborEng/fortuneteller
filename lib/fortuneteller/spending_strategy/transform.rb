module FortuneTeller
  module SpendingStrategy
    # The transforms generated by a spending strategy object
    class Transform < FortuneTeller::Base::Transform
      attr_reader :withdrawal
      def initialize(holder:, date:, withdrawal:)
        @withdrawal = withdrawal
        super(holder: holder, date: date)
      end

      def apply_to(state)
        withdrawn = 0
        state.accounts.each do |k, a|
          next if a.balance.zero?

          a.pass_time(to: @date)
          withdrawal = [a.balance, (@withdrawal - withdrawn)].min
          next if withdrawal.zero?

          make_withdrawal(state, a.account_ref.holder, k, withdrawal)
          withdrawn += withdrawal
          break if withdrawn == @withdrawal
        end
      end

      private

      def make_withdrawal(state, holder, account, amount)
        state.apply_pretax_savings_withdrawal(
          date: @date,
          holder: holder,
          source: account,
          amount: amount
        )
      end
    end
  end
end