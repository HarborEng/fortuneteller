module FortuneTeller
  # Represents a persons social security strategy
  class SocialSecurity < TransformGenerator
    attr_reader :pia
    def initialize(pia: nil, **base)
      @pia = pia
      super(**base)
    end

    private

    def gen_transforms(from:, to:, plan:)
      benefit = get_benefit_amount(plan: plan).on(from)
      transforms = []
      transforms.push gen_transform(from, benefit) if from.day == 1
      current = from.next_month.at_beginning_of_month
      while current < to
        transforms.push gen_transform(current, benefit)
        current = current.next_month.at_beginning_of_month
      end
      transforms
    end

    def gen_transform(date, benefit)
      self.class::Transform.new(date: date, holder: holder, benefit: benefit)
    end

    def get_benefit_amount(plan:)
      @benefit ||= plan.inflating_int(
        FortuneTeller::Utils::SocialSecurity.calculate_benefit(
          pia: @pia,
          dob: plan.send(@holder).birthday,
          start_month: (
            @start_date.day == 1 ?
              @start_date :
              @start_date.next_month.at_beginning_of_month
          )
        ),
        @start_date
      )
    end

    # The transforms generated by social security
    class Transform < FortuneTeller::TransformBase

      def initialize(benefit:, **base)
        @benefit = benefit
        super(**base)
      end

      def apply_to(state)
        state.apply_ss_income(
          date: date,
          holder: holder,
          income: {ss: @benefit},
        )
      end
    end
  end
end
